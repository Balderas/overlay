Index: rts/Lua/LuaUnsyncedRead.cpp
===================================================================
--- rts/Lua/LuaUnsyncedRead.cpp	(Revision 6897)
+++ rts/Lua/LuaUnsyncedRead.cpp	(Revision 6898)
@@ -1060,7 +1060,7 @@
 
 // FIXME	const int origAllyTeam = gu->myAllyTeam;
 //	gu->myAllyTeam = readAllyTeam;
-	const float udist = helper->GuiTraceRay(pos, dir, range, unit, 20.0f, true);
+	const float udist = helper->GuiTraceRay(pos, dir, range, unit, true);
 	const float fdist = helper->GuiTraceRayFeature(pos, dir, range, feature);
 //	gu->myAllyTeam = origAllyTeam;
 
Index: rts/Sim/Misc/CollisionHandler.cpp
===================================================================
--- rts/Sim/Misc/CollisionHandler.cpp	(Revision 6897)
+++ rts/Sim/Misc/CollisionHandler.cpp	(Revision 6898)
@@ -170,10 +170,6 @@
 }
 
 
-
-
-
-
 bool CCollisionHandler::MouseHit(const CUnit* u, const float3& p0, const float3& p1, const CollisionVolume* v, CollisionQuery* q)
 {
 	CMatrix44f m = u->GetTransformMatrix(false, true);
Index: rts/Game/GameHelper.h
===================================================================
--- rts/Game/GameHelper.h	(Revision 6897)
+++ rts/Game/GameHelper.h	(Revision 6898)
@@ -41,7 +41,7 @@
 	CUnit* GetClosestEnemyAircraft(const float3& pos,float radius,int searchAllyteam);
 	void GenerateTargets(const CWeapon *attacker, CUnit* lastTarget,std::map<float,CUnit*> &targets);
 	float TraceRay(const float3& start,const float3& dir,float length,float power,CUnit* owner, CUnit*& hit,int collisionFlags=0);
-	float GuiTraceRay(const float3& start,const float3& dir,float length, CUnit*& hit,float sizeMod,bool useRadar,CUnit* exclude=0);
+	float GuiTraceRay(const float3& start,const float3& dir,float length, CUnit*& hit,bool useRadar,CUnit* exclude=0);
 	float GuiTraceRayFeature(const float3& start, const float3& dir, float length,CFeature*& feature);
 	void Explosion(float3 pos,const DamageArray& damages,float radius, float edgeEffectiveness, float explosionSpeed, CUnit* owner,bool damageGround,float gfxMod,bool ignoreOwner, CExplosionGenerator *explosionGraphics,CUnit *hit, const float3 &impactDir, int weaponId);
 	float TraceRayTeam(const float3& start,const float3& dir,float length, CUnit*& hit,bool useRadar,CUnit* exclude,int allyteam);
Index: rts/Game/GameHelper.cpp
===================================================================
--- rts/Game/GameHelper.cpp	(Revision 6897)
+++ rts/Game/GameHelper.cpp	(Revision 6898)
@@ -280,7 +280,7 @@
 	return length;
 }
 
-float CGameHelper::GuiTraceRay(const float3 &start, const float3 &dir, float length, CUnit*& hit, float _, bool useRadar, CUnit* exclude)
+float CGameHelper::GuiTraceRay(const float3 &start, const float3 &dir, float length, CUnit*& hit, bool useRadar, CUnit* exclude)
 {
 	// distance from start to ground intersection point + fudge
 	float groundLen   = ground->LineGroundCol(start, start + dir * length);
@@ -746,7 +746,7 @@
 float3 CGameHelper::GetUnitErrorPos(const CUnit* unit, int allyteam)
 {
 	float3 pos = unit->midPos;
-	if (gs->Ally(allyteam,unit->allyteam) || (unit->losStatus[allyteam] & LOS_INLOS)) {
+	if (gs->Ally(allyteam,unit->allyteam) || (unit->losStatus[allyteam] & LOS_INLOS) || gu->spectatingFullView) {
 		// ^ it's one of our own, or it's in LOS, so don't add an error ^
 	} else if ((!gameSetup || gameSetup->ghostedBuildings) && (unit->losStatus[allyteam] & LOS_PREVLOS) && (unit->losStatus[allyteam] & LOS_CONTRADAR) && !unit->mobility) {
 		// ^ this is a ghosted building, so don't add an error ^
Index: rts/Game/UI/GuiHandler.cpp
===================================================================
--- rts/Game/UI/GuiHandler.cpp	(Revision 6897)
+++ rts/Game/UI/GuiHandler.cpp	(Revision 6898)
@@ -1530,7 +1530,7 @@
 		const float3 camPos = camerapos;
 		const float3 camDir = mousedir;
 		const float viewRange = gu->viewRange*1.4f;
-		const float dist = helper->GuiTraceRay(camPos, camDir, viewRange, unit, 20, true);
+		const float dist = helper->GuiTraceRay(camPos, camDir, viewRange, unit, true);
 		const float dist2 = helper->GuiTraceRayFeature(camPos, camDir, viewRange, feature);
 		const float3 hit = camPos + camDir*dist;
 
@@ -2253,7 +2253,7 @@
 			Command c;
 
 			c.id=commands[tempInCommand].id;
-			helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,20,true);
+			helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,true);
 			if (!unit){
 				return defaultRet;
 			}
@@ -2267,7 +2267,7 @@
 			c.id=commands[tempInCommand].id;
 
 			CUnit* unit=0;
-			float dist2=helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,20,true);
+			float dist2=helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,true);
 			if(dist2>gu->viewRange*1.4f-300){
 				return defaultRet;
 			}
@@ -2338,7 +2338,7 @@
 			if(mouse->buttons[button].movement<4){
 				CUnit* unit=0;
 				CFeature* feature=0;
-				float dist2=helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,20,true);
+				float dist2=helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,true);
 				float dist3=helper->GuiTraceRayFeature(camerapos,mousedir,gu->viewRange*1.4f,feature);
 
 				if(dist2>gu->viewRange*1.4f-300 && (commands[tempInCommand].type!=CMDTYPE_ICON_UNIT_FEATURE_OR_AREA || dist3>gu->viewRange*1.4f-300)){
@@ -2382,8 +2382,7 @@
 			if (mouse->buttons[button].movement < 16) {
 				CUnit* unit=0;
 
-				float dist2=helper->GuiTraceRay(
-					camerapos, mousedir, gu->viewRange*1.4f, unit, 20, true);
+				float dist2=helper->GuiTraceRay(camerapos, mousedir, gu->viewRange*1.4f, unit, true);
 
 				if(dist2>gu->viewRange*1.4f-300) {
 					return defaultRet;
@@ -2474,7 +2473,7 @@
 
 		GML_RECMUTEX_LOCK(quad); //unit); // GetBuildCommand accesses activeunits. drawmapstuff -> getbuildpos
 
-		helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,20,true);
+		helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,true);
 		if(unit){
 			other.def = unit->unitDef;
 			other.pos = unit->pos;
@@ -3638,7 +3637,7 @@
 			unit = minimap->GetSelectUnit(camerapos);
 		} else {
 			// ignoring the returned distance
-			helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,20,false);
+			helper->GuiTraceRay(camerapos,mousedir,gu->viewRange*1.4f,unit,false);
 		}
 		if (unit && ((unit->losStatus[gu->myAllyTeam] & LOS_INLOS) || gu->spectatingFullView)) {
 			pointedAt = unit;
Index: rts/Game/UI/MouseHandler.cpp
===================================================================
--- rts/Game/UI/MouseHandler.cpp	(Revision 6897)
+++ rts/Game/UI/MouseHandler.cpp	(Revision 6898)
@@ -440,7 +440,7 @@
 				sound->PlaySample(soundMultiselID);
 		} else {
 			CUnit* unit;
-			helper->GuiTraceRay(camera->pos,dir,gu->viewRange*1.4f,unit,20,false);
+			helper->GuiTraceRay(camera->pos,dir,gu->viewRange*1.4f,unit,false);
 			if(unit && ((unit->team == gu->myTeam) || gu->spectatingFullSelect)){
 				if(buttons[button].lastRelease < (gu->gameTime - doubleClickTime)){
 					if (keys[SDLK_LCTRL] && selectedUnits.selectedUnits.find(unit) != selectedUnits.selectedUnits.end()) {
@@ -603,7 +603,7 @@
 	const float range = (gu->viewRange * 1.4f);
 	CUnit* unit = NULL;
 //	GML_RECMUTEX_LOCK(unit); // tooltipconsole::draw --> mousehandler::getcurrenttooltip
-	float udist = helper->GuiTraceRay(camera->pos, dir, range, unit, 20, true);
+	float udist = helper->GuiTraceRay(camera->pos, dir, range, unit, true);
 	CFeature* feature = NULL;
 //	GML_RECMUTEX_LOCK(feat); // tooltipconsole::draw --> mousehandler::getcurrenttooltip
 	float fdist = helper->GuiTraceRayFeature(camera->pos, dir, range, feature);
